name: Java CI with Maven

on:
  push:
    branches: [ "master" ]

jobs:
  #  test-node:
  #    runs-on: ubuntu-latest
  #    defaults:
  #      run:
  #        working-directory: src/main/angular
  #    strategy:
  #      matrix:
  #        node-version: [ 18.x ]
  #    steps:
  #      - uses: actions/checkout@v3
  #      - name: Use Node.js ${{ matrix.node-version }}
  #        uses: actions/setup-node@v3
  #        with:
  #          node-version: ${{ matrix.node-version }}
  #      - run: npm ci
  #      - run: npm run build --if-present
  #      - run: npm test -- --watch=false --browsers=ChromeHeadless
  
  #  test-java:
  #    runs-on: ubuntu-latest
  ##    needs: test-node
  #    steps:
  #      - uses: actions/checkout@v3
  #      - name: Set up JDK 17
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: '17'
  #          distribution: 'temurin'
  #          cache: maven
  #      - name: Test with Maven
  #        run: mvn -B test --file pom.xml
  
  publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Package
        run: mvn -B package -DskipTests --file pom.xml
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the hello-docker Docker image
        run: |
          docker build . --tag ghcr.io/jbonifay/uberclone:latest
          docker push ghcr.io/jbonifay/uberclone:latest
  
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      - uses: actions/checkout@v3
      - name: Push new docker-compose file
        run: scp docker-compose.yml staging:~
      - name: Restart containers
        run: |
          ssh staging 'docker-compose pull'
          ssh staging 'docker-compose up -d'